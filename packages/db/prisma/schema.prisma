// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String      @id @default(uuid())
    address       String?     @unique // wallet address
    name          String? // nickname
    bio           String?
    password      String?
    avatar        String?
    github        Json?
    username      String?
    email         String?     @unique
    emailVerified DateTime?
    image         String?
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt
    accounts      Account[]
    sessions      Session[]
    spaces        Space[]
    SiteSpace     SiteSpace[]
}

model Account {
    id                       String  @id @default(uuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    refresh_token_expires_in Int?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    oauth_token_secret       String?
    oauth_token              String?

    user User @relation(fields: [userId], references: [id])

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(uuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id])

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Space {
    id           String  @id @default(uuid())
    name         String
    description  String? @db.Text
    subdomain    String? @unique
    customDomain String? @unique
    editorMode   String?
    sort         Int     @default(0)
    color        String
    isActive     Boolean @default(true)
    encrypted    Boolean @default(false)

    activeNodeIds Json?

    nodeSnapshot Json?
    pageSnapshot Json?

    deletedAt DateTime?
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt

    user   User?   @relation(fields: [userId], references: [id])
    userId String?

    @@index([userId])
}

model Node {
    id         String  @id @default(uuid())
    spaceId    String
    parentId   String?
    databaseId String?
    type       String
    element    Json
    props      Json?
    collapsed  Boolean @default(false)
    folded     Boolean @default(true)
    children   Json?

    openedAt  DateTime @default(now())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([spaceId])
    @@index([type])
}

model SiteSpace {
    id           String  @id @default(uuid())
    name         String
    description  String? @db.Text
    subdomain    String? @unique
    customDomain String? @unique
    editorMode   String?
    color        String

    activeNodeIds Json?

    nodeSnapshot Json?
    pageSnapshot Json?

    deletedAt DateTime?
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt

    user   User?   @relation(fields: [userId], references: [id])
    userId String?

    @@index([userId])
}

model SiteNode {
    id          String  @id @default(uuid())
    siteSpaceId String
    parentId    String?
    databaseId  String?
    type        String
    element     Json
    props       Json?
    collapsed   Boolean @default(false)
    folded      Boolean @default(true)
    children    Json?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([siteSpaceId])
    @@index([type])
}

model PublishedNode {
    id         String    @id @default(uuid())
    spaceId    String
    nodeId     String    @unique
    nodes      Json
    password   String?
    reviewable Boolean   @default(false)
    editable   Boolean   @default(false)
    expiresAt  DateTime?
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt

    @@unique([spaceId, nodeId])
    @@index([spaceId])
    @@index([nodeId])
}

model Post {
    id         String   @id @default(uuid())
    spaceId    String
    nodeId     String
    nodes      Json
    password   String?
    reviewable Boolean  @default(false)
    editable   Boolean  @default(false)
    expiresAt  DateTime
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@index([spaceId])
    @@index([nodeId])
}

model Theme {
    id           String   @id @default(uuid())
    spaceId      String
    userId       String
    name         String
    introduction String?  @db.Text
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
}

model Template {
    id          String   @id @default(uuid())
    name        String
    description String?  @db.Text
    content     String   @db.Text
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model Extension {
    id          String   @id @default(uuid())
    uniqueId    String
    name        String
    version     String
    description String?  @db.Text
    readme      String?  @db.Text
    code        String   @db.Text
    author      String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model InvitationToken {
    id        String    @id @default(uuid())
    userId    String
    spaceId   String
    roleType  String?
    token     String?
    deletedAt DateTime?
    createdAt DateTime? @default(now())
    updatedAt DateTime? @updatedAt
}
